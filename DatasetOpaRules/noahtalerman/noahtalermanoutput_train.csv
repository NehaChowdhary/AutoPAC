question,answer
Global admins and maintainers can read/write all,"allow { 
object.type == ""enroll_secret"" 
subject.global_role == [admin, maintainer][_] 
action == [read, write][_] 
} 
"
Global admins can read and write Apple MDM command results.,"allow { 
object.type == ""mdm_apple_command_result"" 
subject.global_role == admin 
action == [read, write][_] 
} 
"
All users can read labels,"allow { 
object.type == ""label"" 
not is_null(subject) 
action == read 
} 
"
Team admins and maintainers can create new queries,"allow { 
object.id == 0 # new queries have ID zero 
object.type == ""query"" 
team_role(subject, subject.teams[_].id) == [admin, maintainer][_] 
action == write 
} 
"
or global admins or global maintainers,"allow { 
object.type == ""team"" 
object.id != 0 
subject.global_role == [admin, maintainer][_] 
action == read 
} 
"
Admins can read/write all user sessions,"allow { 
object.type == ""session"" 
subject.global_role == admin 
action == [read, write][_] 
} 
"
Only global admins and maintainers can write labels,"allow { 
object.type == ""label"" 
subject.global_role == admin 
action == write 
} 
allow { 
object.type == ""label"" 
subject.global_role == maintainer 
action == write 
} 
"
Global admins and maintainers can read/write all packs.,"allow { 
object.type == ""pack"" 
subject.global_role == [admin, maintainer][_] 
action == [read, write][_] 
} 
"
Global admins can read and write MDM apple information.,"allow { 
object.type == ""mdm_apple"" 
subject.global_role == admin 
action == [read, write][_] 
} 
"
"For specific teams, only members can read","allow { 
object.type == ""team"" 
object.id != 0 
team_role(subject, object.id) == [admin,maintainer][_] 
action == read 
}"
Team admins and maintainers can read/write for appropriate teams,"allow { 
object.type == ""enroll_secret"" 
team_role(subject, object.team_id) == [admin, maintainer][_] 
action == [read, write][_] 
} 
"
Allow read for matching team admin/maintainer/observer,"allow { 
object.type == ""host"" 
team_role(subject, object.team_id) == [admin, maintainer, observer][_] 
action == read 
} 
"
access) if the overall object is specified,"allow { 
object.type == ""team"" 
object.id == 0 
not is_null(subject) 
action == read 
}"
and there are no team targets,"is_null(object.host_targets.teams) 
} 
"
Global admins can perform all operations on all users.,"allow { 
object.type == ""user"" 
subject.global_role == admin 
action == [read, write, write_role, change_password][_] 
} 
"
Global admins can read and write Apple MDM installers.,"allow { 
object.type == ""mdm_apple_installer"" 
subject.global_role == admin 
action == [read, write][_] 
} 
"
Team admin and maintainer can run a new query,"allow { 
object.type == ""query"""
Team admins can perform all operations on the team users (except changing their password).,"allow { 
object.type == ""user"" 
team_role(subject, object.teams[_].id) == admin 
action == [read, write, write_role][_] 
} 
"
Global admins and maintainers can write queries,"allow { 
object.type == ""query"" 
subject.global_role == admin 
action == write 
} 
allow { 
object.type == ""query"" 
subject.global_role == maintainer 
action == write 
} 
"
Team admin can write teams,"allow { 
object.type == ""team"" 
team_role(subject, object.id) == admin 
action == write 
} 
"
filtered to only teams that they maintain.,"allow { 
object.type == ""targeted_query"" 
object.observer_can_run == false 
is_null(subject.global_role) 
action == run 
 
not is_null(object.host_targets.teams) 
ok_teams := { tmid | tmid := object.host_targets.teams[_]; team_role(subject, tmid) == [admin,maintainer][_] } 
count(ok_teams) == count(object.host_targets.teams) 
} 
"
Observers can run only if observers_can_run,"allow { 
object.type == ""targeted_query"" 
object.observer_can_run == true 
subject.global_role == observer 
action = run 
} 
"
If role is admin or maintainer on any team,"team_role(subject, subject.teams[_].id) == [admin,maintainer][_] 
action == run_new 
} 
"
target teams.,"allow { 
object.type == ""targeted_query"" 
object.observer_can_run == true 
is_null(subject.global_role) 
action == run 
"
Any user can read/write own session,"allow { 
object.type == ""session"" 
object.user_id == subject.id 
action == [read, write][_] 
} 
"
Global admins can read and write Apple commands.,"allow { 
object.type == ""mdm_apple_command"" 
subject.global_role == admin 
action == [read, write][_] 
} 
"
Team Observer can read policies for their teams,"allow { 
not is_null(object.team_id) 
object.type == ""policy"" 
team_role(subject, object.team_id) == observer 
action == read 
} 
"
Global admins can read and write Apple DEP devices.,"allow { 
object.type == ""mdm_apple_dep_device"" 
subject.global_role == admin 
action == [read, write][_] 
} 
"
Query specific actions,"run := ""run"" 
run_new := ""run_new"" 
"
Admin can write teams,"allow { 
object.type == ""team"" 
subject.global_role == admin 
action == write 
} 
"
Global admins may read/write invites,"allow { 
object.type == ""invite"" 
subject.global_role == admin 
action == [read,write][_] 
} 
"
Any logged in user can read global config,"allow { 
object.type == ""app_config"" 
not is_null(subject) 
action == read 
} 
"
Allow anyone to list (must be filtered appropriately by the service).,"allow { 
object.type == ""host"" 
not is_null(subject) 
action == list 
} 
"
Allow read/write for global admin/maintainer,"allow { 
object.type == ""host"" 
subject.global_role = admin 
action == [read, write][_] 
} 
allow { 
object.type == ""host"" 
subject.global_role = maintainer 
action == [read, write][_] 
} 
"
filtered to only teams that they observe.,"allow { 
object.type == ""targeted_query"" 
object.observer_can_run == true 
is_null(subject.global_role) 
action == run 
 
not is_null(object.host_targets.teams) 
ok_teams := { tmid | tmid := object.host_targets.teams[_]; team_role(subject, tmid) == [admin,maintainer,observer][_] } 
count(ok_teams) == count(object.host_targets.teams) 
} 
"
Only global users can read activities,"allow { 
not is_null(subject.global_role) 
object.type == ""activity"" 
action == read 
} 
"
if the user has no explicit role for that team.,"team_role(subject, team_id) = role { 
subject_team := subject.teams[_] 
subject_team.id == team_id 
role := subject_team.role 
} 
"
adding/removing scheduled queries from the pack.,"allow { 
object.type == ""pack"" 
not is_null(object.pack_team_id) 
team_role(subject, object.pack_team_id) == [admin, maintainer][_] 
action == write 
} 
"
Team users can read all software in their teams.,"allow { 
not is_null(object.team_id) 
object.type == ""software_inventory"" 
team_role(subject, object.team_id) == [admin, maintainer, observer][_] 
action == read 
} 
"
Global admins and maintainers can run any,"allow { 
object.type == ""targeted_query"" 
subject.global_role == admin 
action = run 
} 
allow { 
object.type == ""targeted_query"" 
subject.global_role == maintainer 
action = run 
} 
allow { 
object.type == ""query"" 
subject.global_role == admin 
action = run_new 
} 
allow { 
object.type == ""query"" 
subject.global_role == maintainer 
action = run_new 
} 
"
Any user can read and write self and change their own password.,"allow { 
object.type == ""user"" 
object.id == subject.id 
object.id != 0 
action == [read, write, change_password][_] 
} 
"
Global admins can read and write Apple devices.,"allow { 
object.type == ""mdm_apple_device"" 
subject.global_role == admin 
action == [read, write][_] 
} 
"
Team admins and maintainers can write to hosts of their own team,"allow { 
object.type == ""host"" 
team_role(subject, object.team_id) == [admin,maintainer][_] 
action == write 
} 
"
